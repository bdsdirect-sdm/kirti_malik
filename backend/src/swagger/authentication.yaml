swagger: '2.0'
info:
  title: user registration API
  version: 1.0.0
  description: API for user registration and authentication

host: localhost:8080
basePath: /api
schemes:
  - http
  - https

tags:
  - name: User
    description: Operations related to user management


securityDefinitions:
  basicAuth:
    type: basic
    description: Basic Authentication
  Key:
    type: apiKey
    in: header
    name: x-api-key
    description: API key to access this service

# Paths
paths:
  /register:
    post:
      security:
        - basicAuth: []  
        - Key: []        
      tags:
        - User
      summary: Add a new user
      description: This endpoint Adds a new user for the application.
      consumes:
        - application/json
      parameters:
        - in: body
          name: ADD USER
          required: true
          schema:
            type: object
            properties:
              firstName:
                type: string
                description: The user's first name
              lastName:
                type: string
                description: The user's last name
              email:
                type: string
                format: email
                description: The user's email address
              password:
                type: string
                description: The user's password
              confirmPassword:
                type: string
                description: The user's password confirmation
              termsAndConditions:
                type: boolean
                description: Whether the user agrees to the terms and conditions
      responses:
        '201':
          description: User registered successfully
        '409':
          description: Conflict occurred while creating the user (e.g., duplicate email)
        '500':
          description: Internal server error

  /profile/{id}:
    get:
      summary: Get user profile by user ID
      description: Fetch the profile information of a specific user by their user ID.
      operationId: getUserProfile
      parameters:
        - name: id
          in: path
          description: ID of the user to fetch the profile for
          required: true
          type: integer
          example: 1
      responses:
        '200':
          description: User profile successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: User ID
                      firstName:
                        type: string
                        description: First name of the user
                      lastName:
                        type: string
                        description: Last name of the user
                      email:
                        type: string
                        description: Email of the user
                      profilePhoto:
                        type: string
                        description: URL to the user's profile photo
                      address:
                        type: object
                        properties:
                          street:
                            type: string
                            description: Street address of the user
                          city:
                            type: string
                            description: City of the user
                          zipCode:
                            type: string
                            description: Zip code of the user
                          country:
                            type: string
                            description: Country of the user
        '404':
          description: User not found
        '500':
          description: Internal server error
